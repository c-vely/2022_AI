*** JAVA
- 이지유  /  iamjiyoo@kopo.ac.kr  /  카톡:iamjiyoo


** 폴더 관리
- SWCamp
  - java-workspace
  - bin (소프트웨어 관련 툴을 넣는 곳)
  - data (과제, 자료)


** Java 
* 특징
- 컴파일러(.java)와 인터프리터(JVM)를 같이 쓰는 것이 큰 특징 (호환이 가능)
- WORA (Write Once Run anywhere) -> 플랫폼 독립적 (C는 플랫폼 독립적이지만, Window 한정)

- 아직까지 살아 남은 이유는 완전한 객체지향프로그램이기 때문 (C++은 반 객체지향)

- 최대 5천줄의 코드는 절차지향 프로그램이 좋음, 허나 그 이상은 객체지향 프로그램이 좋음 (규모가 크고 변화에 민감하지 않아 유지보수에 좋음)

- 객체지향 프로그램 : 캡슐화, 추상화, 상속, 다형성 4가지 특징 (이걸 잘 사용할 줄 알아야 함)


* Java의 실행 과정
- .java를 컴파일 > .class로 변환 > JVM 인터프리터를 통해 실행됨
- .class를 압축해 놓은 것이 JRE파일


* Java 시작
1. JDK 설치 
2. eclipse 설치




**** 실습 1)
- 학습 자료    http://192.168.12.67/
- 추후 웹 개발하려면, 다른 버젼 깔아야 함. 



*** 화면 파악
- 우측 상단 아이콘 open perspective > java(default) 



*** 프로젝트 생성
- Create a Java Project 클릭 > Project name : java_basic > JRE : JavaSE-1.8 > Next > Finish


* tip
- Pakage Explorer는 실시간으로 동기화 되지 않아서 새로고침 해야 한다.



*** class
- src 우클릭 > new > class 클릭 > Name : HelloMain > Package : kr.ac.kopo.day01 > Finish (-> kr.ac.kopo.day01.HelloMain 이름을 가진다)

* tip
- 클래스 이름과 파일 이름이 같아야 한다
- 보통 패키지명은 회사 도메인을 거꾸로 쓴다. 폴더관리가 쉬워짐
- 패캐지를 잘 쓰는 연습을 해야 한다. 



*** 메소드
- 이름 뒤에 괄호가 붙으면 '메소드' (파이썬, C는 '함수'라고 부른다.)
- main()은 고정.  (단축키 main입력 + Ctrl + Space + Enter)



*** Run
- Run > Run as > 


* tip
- 자동으로 컴파일 됨. 빨간 줄 / 실행은 인터프리터 사용하기 위해 Run



*** println() 메소드
- System.out.println();  (단축키 sysout + Ctrl + Space + Enter)
- 'A'   :     문자      -> a = 'A';     메모리에 바로 저장
  "A"   :     문자열   -> a = "A";    다른 메모리에서 참조해서 씀
   A    :     변수

* tip
- 자바는 들여쓰기x, 블록스코프로 구분함. 그래서 들여쓰기 안해도 된다.  또 ; 문장 끝에 세미콜론 붙여야 한다. (파이썬과 차이)
- 콘솔(파이썬), 웹(자바스크립트) 근본이 없음. 그 만큼 유연함. 



*** 주석
- //      :   한 줄 단위 주석 처리   (단축키  원하는 곳 위치 + Ctrl + /)
  /* */   :   여러 줄                    (단축키  여러줄 블럭 + Ctrl + /)   ---> 인텔리제이를 씀. (회사는 유료, 학생은 무료. / 그래서 회사는 이클립스 많이 씀)

- 코드 설명할 때, 주석을 씀. 처음부터 주석 다는 연습하면 좋음. 특히 다형성 부분에서 굉장히 중요



*** 상수 5가지 종류
- 정수
- 실수
- 문자
- 문자열
- 논리값 (참 / 거짓)



*** printf() 메서드 (jdk 1.5버젼부터 등장, C문법 결합)
- 10 + 20 => 30
- 10 + 20.3 => 30.3
- 10 + "ABC" => "10ABC"
- "ABC" + 12.34 => "ABC12.34"
- "ABC" + "EF" => "ABCEF"
- 10 + true   // error
- true + "ABC" => "trueABC"

- printf("변환문자") : %c 문자 / %s 문자열 / %d 정수 / %f 실수 / %b 논리값

* tip
- 여러 상수가 결합되어 있을 때 씀. 한줄 출력에서는 안 씀



*** 식별자

* 명명규칙
- 클래스 : 단어의 첫 글자를 대문자로 표기
- 변수, 메소드 : 첫글자 소문자, 여러개 단어 결합은 첫글자 대문자
- 상수 : 대문자로만 표기, 여러개 단어 결합은 '_' 로 구분



*** 변수
- 상수 값들을 저장하기 위한 공간
- Ram 메모리에 저장 (Ram은 시스템, 사용자 메모리로 구분됨)
- 변수의 라이프사이클은 나랑 가장 가까운 블록을 따라감



*** 자료형
- 어떤 종류의 변수를 할당할지 여부를 알수 있다.
- 자료형 종류 : 기본 자료형(소문자로 시작, 실제 사용할 값), 참조 자료형(첫글자 대문자로 시작 : 클래스, 객체 참조값)

** 기본 자료형 8가지
- 논리형 : boolean
- 문자형 : char
- 숫자형 : 정수형 (byte, short, int, long), 실수형(float : 소수점 7자리, double : 소수점 15자리)

- Java는 signed, unsigned 없음
- 컴퓨터는 int를 기본형으로 인식 (4 byte), 별 말 안하면 정수는 int, 실수는 double
- boolean은  1bit크기만 필요하지만 메모리는 1 byte를 사용 
- Java는 char는 2 byte UNICODE 기반 (C는 ASCII CODE, 1 byte)

* ASCII CODE
- 문자를 숫자로 맵핑한 것
- A => 65  /  a => 97
- "ㄱ"은 문자열

* UNI CODE
- 아시아계열 문자. 초성, 중성, 종성 2byte (1 byte, ASCII Code로 해결 안 되는 것) 
- 'ㄱ' 은 문자





**** 실습 2)

*** 새 클래스 생성
- Ctrl + N > class 입력 > Next > Name : VarMain > Finish



*** 변수 선언
- int a; 메모리 공간을 할당(쓰레기 값을 출력)


* tip
- Java는 변수 선언 후 출력하면 error 발생 (반드시 초기화를 해야 함)



*** 참조형 자료형 (위치를 기억하기 위한 용도로 만든 것. 즉 메모리 위치를 가리키기만 함)
- 문자 : String

* tip
- 컴퓨터 메모리 (static, stack -> 기본형, heap->new)
- java는 heap을 쓰는 동적할당 방식. 임시저장소로 실제공간의 메모리 위치만 기억하는 것. 실제론 공간이 2개 만들어짐 (C는 stack을 쓰는 정적할당 방식, 공간을 대표할 이름이 있음)
- 참조형은 무한대로 만들 수 있음. 생성시, new 키워드를 써야 함.



*** 형변환
- 기본자료형 보다 참조자료형의 형변환이 더 중요
- 기본자료형 중 boolean은 제외
- 연산하려는 변수의 자료형이 다를 때, 형변환 발생 (문법적으로 오류가 있거나 없거나 둘 중 하나)
- 같은 자료형으로 연산하면 같은 자료형의 결과가 나옴
- 다른 자료형으로 연산하면 큰 자료형을 따라가거나, 강제 형변환해줘야 한다.


** 묵시적 형변환
- 작은 범위의 값의 큰 범위의 변수에 넣는 것. "묵시적 형변환이 발생한다."
- 형변환 연산자 생략 가능


** 명시적 형변환 (강제적 형변환)
- 작은 범위에 큰 범위을 대입하라고 강제로 수행하라고 시키는 것.
- 형변환 연산자 : (타입) 값   /  ex)  a = (int) b 



*** 연산자
- 단항 연산자, 이항 연산자가 있음. 그 중에서도 이항 연산자를 가장 많이 씀. 보통 컴퓨터 연산은 이항 연산
- 논리, 비트만 단항 연산자를 씀

* tip
- Java는 비트 연산자를 쓸 일이 없음. JVM을 제어하는 프로그램을 만들지 않는 한...


** 산술 연산자
- + , -, *, /, %(정수형일 때만 나옴. 한정 연산자)


** 대입 연산자
- =


** 복한 대입 연산자 (배정 연산자)
- +=, -=, *=, /=, %=


** 증감 연산자
- ++, --
- 대입 연산자가 없어도 변수의 값이 바뀜
- 정수형일 때만 쓸 수 있음
- ++변수   or   변수++
- 같은 변수를 증가연산자를 써서 쓰는 건 좋지 않다. 


** 관계 연산자

* tip
- java에서는 관계연산자와 논리연산자만 boolean으로 나옴. 반복문과 조건문에서 잘 사용.


** 논리 연산자
- &&, ||, !
- 실제 컴퓨터는 논리케이트 상 3가지 경우를 본다.
- 교환법칙 성립 안 됨. 돈케어가 있으면 뒤는 하나도 안 본다. 그래서 순서가 중요함




**** 실습 4)
- 논리연산자를 잘 쓰면 결과 도출이 가능하다. (조건문 안 써도 된다)
- && 연산자 : A가 False이면 뒤를 연산하지 않음 
- || 연산자 : A가 True이면 뒤는 연산하지 않음



** 3항 연산자 (조건 연산자) 
- 둘 중에 하나를 무조건 취해야할 때 사용함
- java에서는 쓸 수 있는 연산자가 정해져 있음. 증감연산자 사용 안 됨.
- 조건식 ; 선택 1 (true) ; 선택 2 (false)




*** 입력
- 패지키가 다른 메소드를 사용하고 싶다면 Import해야 한다.
- Scanner 인스턴스를 만들었다. 객체를 만들었다라고 표현함.

* import 사용시 생략 가능
import java.util.Scanner;
Scanner sc = new Scanner(System.in);


* 그냥 사용시 패키지까지 다 적어줘야 함
java.util.Scanner sc = new java.util.Scanner(System.in);


** 문자열 입력
- 단어 입력 :  sc.next();   
- 문장 입력 :  sc.nextLine();


** 숫자 입력
- 정수 입력 : sc.nextInt();
- 실수 입력 : sc.nextDouble();


** 문자 입력
System.out.print("문자를 입력 : ");	
char ch = sc.nextLine().charAt(0);
System.out.println("ch = " + ch);


* tip
- 입력 버퍼가 있어서, 입력에 오류가 있을 수 있음. 추후 얘기할 예정
- 문자를 입력받는 건 없어서, 문자열로 입력받고 따로 추출해야 함. 
- JAVA 책을 좀 보면 좋음. 복습 많이 해라.



**** 제어문

*** 반복문

** while

** for

** do while



*** 조건문

** if
- 조건이 참이면 블록 스코프 안의 내용을 실행하고, 거짓이면 건너뛰어라.
- 실행 문장이 1줄이면 { } 중괄호 생략 가능. 하지만 처음이니까 무조건 붙여서 써라.


** case

















 

















