**** 상속 + 형변환

*** 묵시적 형변환
- 좌변(부모)과 우변(자식)이 상속관계이면, 묵시적형변환
- Parent p2 = new Child01();  오버라이드되어 있는 메소드가 있다면 


*** 명시적 형변환
- 대입연산자 기준으로 좌변(자식), 우변(부모)
- 묵시적 형변환이 진행된 이후여야 명시적 형변환 가능


*** instanceof (객체 타입을 비교하는 연산자)
- 상속 관계여야지만 가능



**** 추상 클래스
- 변화에 민감하지 않게 대응하게 위해 상속과 다형성이 생기고, 다형성에서 묵시적 형변환이 발생
- 다형성의 특징을 살린 방법
- 다형성을 위해 자식이 부모와 같은 이름을 가진 메소드를 무조건 오버라이딩하도록 하는 것

- 강제성을 부여해서 반드시 재정의 하도록 한다는 말은, 결국 표준화 작업을 하겠다는 것이다. 그것이 추상클래스의 사용 목적이다. 

- 활용제한자 abstract 키워드 사용 (클래스, 메소드에만 사용. 멤버변수 x)

*** 추상 클래스
- 하나 이상의 추상 메소드를 가진 추상 클래스 (추상 메소드 때문에 나온 것)
- 추상 메소드를 가진 추상 클래스 
- 반드시 상속받은 자식들이 재정의해줘야 함.
- 인스턴스 객체를 못 만든다.


*** 추상 메소드
- 메소드의 선언부만 있고 내용이 없음. (설계만 하고 내용 정의 x)
- 추상 클래스보다 메소드가 더 중요
함. 



**** 실습 1) 
- 상속구조를 먼저 보는 연습을 해야 한다. 

<순서>
1. 설계(클래스, 멤버변수, 메소드 정리) > 클래스 만들고 > 작동되는 거 확인
2. 상속 관계 정리하고 > 작동 확인 
3. 추상 클래스 필요하다면 사용 > 추상 클래스 상속 관계 정리 > 작동 확인
4. 객체 이용해 다형성 살리고 > 작동 확인
5. 예외처리까지 마무리 > 작동 확인 > 끝

* tip
- 객체지향 관계를 생각하면서 만들어야 한다. 



**** 실습 2) 도형 
- 추상클래스를 상속받고 정의하지 하지 않으면 상속받은 클래스도 추상클래스가 된다.

