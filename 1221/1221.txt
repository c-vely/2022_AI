**** 조건문

*** 규약

기상
if(whrjs1) {
	//조건1이 참인경우 실행
	걸어서
} else {
	//조건1이 거짓인 경우 실행
	버스타고
}
학교간다


** 삼항연산자로 표현
조건1 > 걸어서 : 버스타고



**** 실습 1)

*** 패키지 + 클래스 생성
- 같은 프로젝트 > src 우클릭 > new > pakage > kr.ac.kopo.day02 
- class > IFMain02 생성


*** 입력 단축키
- import java.util.Scanner;  (단축키  Ctrl + Shift + o)


*** 의사코드 (3개 상황 -> 2개의 경우로 조건식 만들기)
기상
- 걸어서
- 버스타고
- 택시타고
학교간다
-----------------------

1) 중첩된 if문 (구간설정이 되어 좋음)

기상
if(조건1) {
	걸어서
} else {
	if(조건2) {
		버스타고
	} else {
		택시타고
	}
}
학교간다

-----------------------

* tip
- 조건식은 참과 거짓으로만 결과가 나오기에, n개는 최소 n-1경우가 나온다
- 조건식 배치가 중요
- 여러 조건이 있다면 일렬로 나열했다면, 왼쪽부터 가던지, 오른쪽부터 가던지 하는 2가지 방법 중 고르면 된다. (중간 지점부터 시작하면 코드가 비효율적이다)
- if조건식에 3개의 항을 비교하지 않는 이유는 논리연산자는 거짓과 참으로만 출력되기에, 1번, 2번에서 비교해서 논리값을 구하고, 그것을 3번과 비교하니까 오류가 된다. 
- 그래서 2개씩 묶어서 중간에 && 비교연산자를 둔다.
- 일반적으로 코드 작성시, 변수를 왼쪽에 쓴다.


*** 5개의 조건 (4개의 경우)

1) 중첩 if문 (종속적 형태)

if(조건1) {
	문장1
} else {
	if(조건2) {
		문장2
	} else {
		if(조건3) {
			문장3
		} else {
			if(조건4) {
				문장4
			} else {
				문장5
			}
		}
	}
}

------------------------------------------------------

2) else if (대등적 관계로 보이게 하기 위한 문법-> 다중 if문)

if(조건1) {
	문장1
} else if(조건2) {
	문장2
} else if(조건3) {
	문장3
} else if(조건4) (
	문장4
} else {
	문장5
}

* tip
- 종속적 if문, 대등적 if문이 좋을 지는 코드를 짜보면 됨. (해석은 동일)
- 종속적은 이거는? 이거는? 이거는? 순차적 느낌
- 대등적은 이거 포함하지만 이건 아니, 위는 아니지만 이건 참이라면, 위는 아니지만 이건 참이라면 같은 느낌 



**** switch (다중 선택문)
- Java에서는 switch는 if로 바꿀 수 있는데, if는 switch 안됨. 
- 동등비교문장 byte, short, char, int, enum, String의 if는 switch로 변경 가능
- 내부에 if문을 쓸 수 있으나, break를 쓰면
- case 뒤에 나오는 같은 자료형이 되어하는데, JDK버젼에 따라 다름. (1.7버젼부터, byte, short, char, int, enum, String사용 가능)
- 문자로 쓸때, if문보다 편하다. 


*** break문(빠져나간다)
- 가장 가까운 중괄호 종료지점으로 이동하여 빠져나간다. switch or 반복문에서만 쓸 수 있다.


* tip.
- continue는 쓰지 않는 게 좋다. 잘 사용하지 않는다.
-




**** 과제
- 패키지 : ko.ac.kopo.day02.exam / 클래스 : ExamMain01

** if문으로 코드 짜기

** switch문으로 코드 짜기




**** 반복문
- 파일을 읽거나 복사할 때 횟수는 모르고 끝만 알고 있다면 while을 많이 씀
- 시작과 끝이 존재하거나, 횟수를 알 때 for를 사용


*** while 문 
- 한바퀴 뛸 차례다. 
while(!열바퀴 다 뛰었니?) {
	운동장 한 바퀴 뛴다
	바퀴수 증가
}

* tip
- Java는 do while 잘 안 씀.
- 한 줄 복사 (단축키 Crtl + Alt + 아래 방향키)
- 여러 줄 복사 (블록 잡고  상동)
- 위치 이동 (단축키 Alt + 방향키)
- 삭제 (단축키  Ctrl + D)


*** for 문

* tip
- 처음에는 여러 형태로 써보라.

- 변수의 생명주기는 중괄호와 연관있다. 
- for문 안의 변수는 for문 안에서만 살아 있음

- 후위증가가 스텝수가 많음, 그래서 전위가 조금 더 빠르나 지금은 별 못 느낌
- 현재는 증가를 확실히 보여주기 위해 전위 증가를 사용했음.

- 배열은 for문을 많이 사용한다. 



**** 실습 )
1. 1 ~ 100 정수 출력
< 1 ~ 100사이의 정수 출력>
1 2 3 14 ... 98 99 100

2. 100 ~ 1 사이의 정수 출력
< 100 ~ 1 사이의 정수 출력 >
100 99 98 97 ... 3 2 1

3. 1 ~ 100 사이의 홀수 출력
< 1 ~ 100 사이의 홀수 출력 >
1 3 5 7 9 11 ... 98 97 99

4. 100 ~ 1사이의 짝수 출력, 단 한라인에 정수 5개씩 출력
< 100 ~ 1 사이의 짝 수 출력 >
100 98 96 94 92
90 88 86 84 82

 



