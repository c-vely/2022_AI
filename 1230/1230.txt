**** 인터페이스
- 객체지향은 변화를 둔감하게 만드는 게 특징
- 추상 메소드의 집합
- 표준화 작업이 목적 (기능에 대한 설계도)
- 눈에 보이는 사물을 추상화시키기 위해 만들어진 것이 아님

- 인터페이스 기본은 public 
- 상수는 static final
- 모두 추상 메소드이기에 public abstract가 생략되어 있음


*** implements vs extends

** 인터페이스 상속
-  인터페이스 상속할 때 + 클래스 구현을 하기 때문 = implement (다중 상속 지원)
- 인터페이스를 상속 받은 +  인터페이스에서 구현하는 = extends (단일 상속만 가능)

** 클래스 상속
- 클래스 상속 + 클래스 = extends (단일 상속만 가능)


* tip
- 보통 인터페이스 > 인터페이스 상속받은 추상 클래스 > 추상 클래스 상속받은 구현된 클래스에서 작업


*** 실습
- 기능의 추가는 인터페이스를 많이 씀

1) 그냥

2) 인터페이스



**** getter, setter 메소드
- 클래스 내 private으로 설정된 멤버변수를  다른 클래스에서 접근하기 위해 사용하는 메서드

* tip
- 꼭 getter, setter 메소드를 만드는 것이 아니다. 필요한 메소드만 정의해서 사용해서 쓰면 된다. 
- 이클립스 or 인텔리제이 에서는 getter, setter를 자동으로 만들어줌  Source > Generate Getters and Setters > 


*** Object.toString() 재정의
- 보통 객체 정보는 Object클래스의 toString 클래스를 오버라이딩 하여 사용한다. 
- 자동 완성 (Source > Generate toString() > 사용할 변수 클릭 > Generate)



**** final
1. 변수 : 상수
2. 메소드 : 오버라이딩 금지
3. 클래스 : 상속 금지

- 잘 쓸일이 없지만, 저작권과 관련되어 못 쓰게 사거나 못 바꾸게 할 때 사용



**** 인스턴스 객체 1개만 만들기
- 생성자 Private으로 설정하면 됨
- 이럴 걸 싱글톤 패턴이라고 함.

- getInstance() 쓰는 디자인 패턴 2가지
1) 싱글톤 : 1개의 객체만 만드는 것
2) 팩토리 : 내부가 달라져도 겉으로는 똑같은 객체


* 참고
- 생성자 Private   https://ecsimsw.tistory.com/388
- 인스턴스 막는 방법   https://nankisu.tistory.com/90



**** 실습
- 편의점에서 과자, 음료, 아이스크림이라고 해서 구매하는 형태를 메뉴로 만들어서 설계해 보라.


* tip.
- 처음에는 규모를 작게 해서 연습을 많이 하고 점점 늘려가는 방법으로 사용하는 게 좋음
- 처음부터 크게하면 어려움
- 게임도 괜찮고 설계를 해서 한 번 만들어봐라. 계속 고쳐가면서 발전 시키는 것이다.
- 고치는 걸 귀찮아 하는데 여러 개의 문법으로 써보는 것이 좋음
- 소스를 외우려고 하다보면 패턴이 보이고 적용을 할 수 있게 된다. 
- 외울 정도의 노력이면 이해할 수 있게 된다. 
- 책도 많이 보고 동영상도 많이 보고
- 자바 하나만 잘해도 취업 잘 된다. 그걸 못해서 못하는 거다.



**** 디버깅
- 디버깅 Run > Debug > F5, F6, F7 기억하기



**** Python
- 리스트, 딕셔너리, 파일입출력, 함수  4가지 중요 
- 그 다음에 pandas 공부하면 된다.
